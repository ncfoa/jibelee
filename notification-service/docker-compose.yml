version: '3.8'

services:
  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=development
      - PORT=3009
      - DB_HOST=notification-db
      - DB_PORT=5432
      - DB_NAME=notification_db
      - DB_USER=notification_user
      - DB_PASSWORD=notification_pass
      - REDIS_HOST=notification-redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-for-notifications
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      - notification-db
      - notification-redis
    networks:
      - notification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  notification-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=notification_user
      - POSTGRES_PASSWORD=notification_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5434:5432"  # Different port to avoid conflicts
    volumes:
      - notification_db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - notification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  notification-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - notification_redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - notification-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:notification-redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - notification-redis
    networks:
      - notification-network
    profiles:
      - tools

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@notification.local
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8083:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - notification-db
    networks:
      - notification-network
    profiles:
      - tools

  # Nginx (Optional - for load balancing/reverse proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - notification-service
    networks:
      - notification-network
    profiles:
      - proxy
    restart: unless-stopped

networks:
  notification-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  notification_db_data:
    driver: local
  notification_redis_data:
    driver: local
  pgadmin_data:
    driver: local